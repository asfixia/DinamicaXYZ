<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<script>
    <property key="dff.charset" value="windows-1252" />
    <property key="dff.date" value="2020-Jul-20 20:45:48" />
    <property key="dff.version" value="5.1.0.20200628" />
    <property key="submodel.description" value="Pluguin to publish your maps online. (Experimental)&#x0A;windows only for now" />
    <property key="submodel.documentation" value="https://mappia.earth/mappia_publisher/" />
    <property key="submodel.group" value="Web" />
    <property key="submodel.import" value='CreateLegendFromQntEntry { { &quot;inputMap&quot; : Map, &quot;MaximumNumberOfCategories&quot; : PositiveIntegerValue } { } { &quot;categoriesAsCsv&quot; : Table, &quot;generatedCategories&quot; : Categorization } }' />
    <property key="submodel.largeicon" value="iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAHuklEQVR42rVXCVCU5xmGNk0iVmLwBooCixwL7P57sPe9/7H3fR+wB9dyLofVig4ahLCLmhAp5hKNxsQmsWiiBicSDjUHU0OTpk47aae2TUwnbSedSqaxU+n3o2t2WTZCMn4z3+z/v9//fu/zvcfzfpuUtPTxQG4pXyyxB4YU/ta3yBJ1edLKlSuT7udI31xSwFQ6W2TetiNslXMScTcOs9XuFpJQrsQ8zWGmyjHKkFtHhGZ/ZwFDjACV5O9tNC0tLVXpbz9tatkzIfe3X9M3dr5PEStViTZfvmbNeobM3Fe+a+AG7KqfNjTvfpMk0qDf1f6PJLaal2Te4AWRpWqco3FfLGJIuoXW6iGG3DIqNPm7soiMIvDdo9kUDo9n8u2lIcYRibPu2RIuelZkrZo0Bvf8BfMEr+Qx+YVLNf4QMP4K7Gw4AZ5XgY3PbSykbuBqykc5SkcNkD3IUtrdfL33FFdXMQFO+xJFpDWnZRAyxdaa1wVm//Gk5cvXcbTuaRqskfONvsvZhdDGxZnetOlhiSNwEnYGjuLJhovIItVF/Hf16tUrgCdOcXTOPfPDUMKW81F34xWW2rENX8vII5PB6S/ja5BIJSjDLKObiMT132o7P780Gy1vPiu21x6KGMcH7n7c1ZEK4GhdQzyd5zAeJtwYCEmT3Nf2EVWqVkR0SvlKt6Lyp0ORdxJfhQiM/suFTKk0IQBdQ+cY5mn5OIdIzIqWI+VNJwkQSxAlSgYn7Yad9SMyb+srQGcyh8zIi9YRGn0d+IzWAe8H/d3PzaSkpKQvCAB21l0isuEWtsrxThlqrom4GS5v6qPB+uqoT38IibUuXf3O3/l7np9hKW09K9LTV0fvhXlaDxdzUDP+TKBziGWY+TRDYTuore/440/yIVqc8XVZWTkCo28yUn5speMZlsrxOn4ypsYV5OrLW/HkZMqtjSyF45LIWnM4n8bvgp2NR/l6z2NstfN9ibX66TwymzznNXfju6nrc+g0zLgPEmtOEVloGS43BLveAom7NQ4A2DgISmd3tIzEU6Bcreddgcl7UmDynwfJOM5Wux5bl5u7Fl8vYsNOzNs6EClbCNa6uFr3mzx9xRlza/enQnPlGwp/kBfjGfC9JrDjZBwAqSPwWh7E5s8nIrbGOVC779hNrr7iKpEpVkWvg1O55d62gZgiKiBvosvM5z27B/8u97RMkHlyTXTFsJSWeteO/j+Dx4djSAfQ6NSdzE/Op0pEPF35IbJQPcpS2dsEJt9QNpFeyVDaXmUqbEfXZhevm8t0bgyAB+hycwcdNY0XC+QwSai4SEGMDrmvfUrmbRkhsrA5RtywsbiwOnzkZmGZ6G7FJM01FkdgmC6z1IJYXhKYfb8oYiKyCHKRpXogl8LF7tS0gYYaJ2mooa6YL/PK/a2DpXyZmCGzvM1QWHbhJHW7DOXj0QkrdQbGxPaaMwVMqdCy5fEPxbZAz10AoPafVVS2fwJiNji/BOdKyuzfHwFwuzOlpzDllr2AH67om3b9FnhvOLuUlh+tAwCMzdsmuVQgU4E8GwMh+Ny+ff+vMwoKVs2tAMIYtm3tuw7i/fiG7MI4ygThCMcAAJtRYaNf6qj70NzWc42psD6F50sMAF4cAJxKV7DUzh3GYNdnnq6n/wDK8TYfFLGlGqmr4Zc0RO/DWypX6zoNerzjDtMBABWhCIAiGh8CFXMO5MJAAY1fDRjwIA6GatVNQ1uxYUovfILSi5yFgthnUBixEvplD60nENYIjJ5ursHzgdRR3w/CN4i6m5+IxrZMbK+7iiPEX7IhLklkrjoA4voOiP/eMtR4JIfE1LMU9n0A4HmQH4w5MEyJA65teIESQsbAnF1w9mA36F7dxxyduz3iJXX11jdKuJgpxjuauo5TTKWjcp7TlrGUjm3VfS/8m6VyXqGjhiYg+8HdBmSXdtB6ZV8lNP7NvEUNI4131H4stdf/Hr8+xMZZ79kGLhyvRssyiRQCKKuX0YrmaUBEU4DBzkFilW2uIfWqV0Dd8OeLMB6Z/6OEETEkVFtxD8TlR8bmMpJ1S+hvOKfjMeNoXAdoiGGkqAzlwY76brw3EEgsiOt1n6A2qz6ldmHXFzJUcaxptu/C4MIgwsg0VtV6APDKzoV6UbJz+/4pwAPH2RrXFF1mqIrwAFbRcmwzTSCjhOCfgY1uJjql58Xm2Rtfz8zi48mx5xb8Bm6qv0ooKWMt2A1Nrd0XsIrge6mpqWnRcrGtZrxkO7/n21zseTE4O/P1V7PRo388HgQrpL9Vukt0mBZGiuMAlPDVfH1D568kttqjkRLEB9ti+wgo/2cpxr8B8Xwi0P+lhOHq+BsZuDZpAh2XYFfDa0mZmcuAKIXRqL+eyLj3eEtC45Hx1MShxIkZQnnxd4Pc0rXqwPZxma/tzCrQ05k79f9IBAD9uW1W9Uz53Lz2z7/GGPYBcJE1aghdUB8KIWcWzIdHsrIeVdVsuwD44Tfc3eYvF1Nqn3zxpxgAioPOxZTnlwnviBkEQqahsfMDpKvmX/cRwI173tSLt3BooARv3ScAE4v6u0ANwYP32oz3hHZW2K+/O2lh9J4AoBBqWBQAYqfpQaDw8hKo996zF9m/5D+M5DCqAcrnQPl88R0NzwDD45ReTB/Z8/9yI4/haFpiAAAAAABJRU5ErkJggg==" />
    <property key="submodel.name" value="MappiaPreviewMapOnline" />
    <property key="submodel.smallicon" value="iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAC4UlEQVR42mNgQANSxsZcbon5PsEFzZkeicXNtsEJpW5R2RHGDr4iDAQAo3tCQb9bfN5Ju+DECQ7hGdF8MjJCweUd2o6R6V2usTmn/bOq1uu5uXFj08zkGpff4RSVYWblF11sF5TUYBuYaO+VVJZhG5Ya7BSe0WPpE+3sGp1dZx+S0gRyJYpur5SyeSDNILZdcFIFyDUg2jetIsU1NneioWeoqEtEhoNncqGvlVugmG96+VqgGjawZhkZGU6nyLR266CEWsfQRHsr39g8C48IBfuQpCqftIqd1gFxTQ7hKRZBuY3pJu5hwUDvFPllVk4x9wvWAxvgEpXnbxMQbwxi2wQml/uklp6y9InKYdDWZrMLSS0HucY2KDHEJ638rGtMbgdYD9A1UeVd+QwQJydWu0ZmRVoHxFba+SeGm3qEVtgExOVbB8ZH24elVtoGxXtb+kdXmHuG17nF5vo6hqd1OYYmewfmNiwDGxCQVX3YOjAuHhYe5t6RWSDawj/KxTe94iowUFNBfEu/mHxYbDmEpRVHV0+4L66nx83gHJ3daBUcH2zlG1MOdFqSiUtgoU1AbJpVQHymXVhCvUmV32qTVs9Hxi2eT0yavBZaRcQ2A2Ms3SEstRtsnF96ZZBPSqUX2Bbf+EjP5KJr1v4x6Q4NDixADXeNutz+I2OzHs8bJkke6r6p5SVgA0S1tXkCc2oXAgOyxjYo2RsUfSY1vi3GLR7PYZqqNrf/n3xoHtwQ6+rQXZZ+EYbwdOCXWbMcmNJMwH4vCluDbCNI899/f/+DwNRD88FiJt0ef4w6XVeZdnlJgA3QBkYZMNHMtAtJcjNr9nkA02w7IfDv3OPL/n//9QNswNIz6/77zoqHG27Y5bYVkRyNjVl9MyqXWbaGfEf399uv78EG2E0M/I8m9wkjUxg1uZehGzDt8IL/80+s/G/e5/0PTW4vZrb6z8Bo1OlWCpS8j24QEv5l1OW+x6DdQwEAz35TFJ4jlw4AAAAASUVORK5CYII=" />
    <functor name="String">
        <property key="dff.functor.alias" value="expressionNotUsed" />
        <inputport name="constant" peerid="v7" />
    </functor>
    <functor name="LoadLookupTable">
        <property key="dff.functor.alias" value="loadTemporaryFilterTable" />
        <inputport name="filename" peerid="v9" />
        <inputport name="suffixDigits">0</inputport>
        <inputport name="step">.none</inputport>
        <inputport name="workdir">.none</inputport>
        <outputport name="table" id="v1" />
    </functor>
    <functor name="IntegerValue">
        <property key="dff.functor.alias" value="Max Zoom" />
        <property key="dff.functor.comment" value="Max zoom of details." />
        <property key="dff.functor.extendedcomment" value="The maximum detail level.&#x0A;* Each increased zoom double the publication time.&#x0A;* https://wiki.openstreetmap.org/wiki/Zoom_levels" />
        <property key="submodel.in.constant.advanced" value="yes" />
        <property key="submodel.in.constant.description" value="Max zoom of details." />
        <property key="submodel.in.constant.name" value="maxZoom" />
        <property key="submodel.in.constant.optional" value="yes" />
        <property key="submodel.in.constant.order" value="4" />
        <inputport name="constant">5</inputport>
        <outputport name="object" id="v2" />
    </functor>
    <functor name="Map">
        <property key="dff.functor.alias" value="Map To Preview" />
        <property key="dff.functor.comment" value="Map to display online." />
        <property key="submodel.in.constant.advanced" value="no" />
        <property key="submodel.in.constant.description" value="Map to display online." />
        <property key="submodel.in.constant.name" value="mapToPreview" />
        <property key="submodel.in.constant.optional" value="no" />
        <property key="submodel.in.constant.order" value="1" />
        <outputport name="object" id="v3" />
    </functor>
    <functor name="ExtractStructNumber">
        <property key="dff.functor.alias" value="extractStructNumber802" />
        <property key="submodel.out.number.description" value="Returns 1 when finish" />
        <property key="submodel.out.number.name" value="output" />
        <property key="submodel.out.number.order" value="1" />
        <inputport name="struct" peerid="v13" />
        <inputport name="name">$&quot;(out)&quot;</inputport>
    </functor>
    <functor name="String">
        <property key="dff.functor.alias" value="Map Filename Or Title" />
        <property key="dff.functor.comment" value="The title or path for the published map." />
        <property key="submodel.in.constant.advanced" value="no" />
        <property key="submodel.in.constant.description" value="The title or path for the published map." />
        <property key="submodel.in.constant.name" value="mapFilenameOrTitle" />
        <property key="submodel.in.constant.optional" value="yes" />
        <property key="submodel.in.constant.order" value="6" />
        <inputport name="constant">$&quot;(New Dinamica Online Example Map)&quot;</inputport>
        <outputport name="object" id="v4" />
    </functor>
    <functor name="TableJunction">
        <property key="dff.functor.alias" value="tableJunction41962" />
        <inputport name="possibleTable1" peerid="v24" />
        <inputport name="possibleTable2" peerid="v25" />
        <outputport name="table" id="v5" />
    </functor>
    <containerfunctor name="CalculateMap">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="calculateMap2703" />
        <inputport name="expression">[&#x0A;    if isNull(i1) then&#x0A;        null&#x0A;    else &#x0A;        t1[&gt;=i1] ? v1&#x0A;]</inputport>
        <inputport name="cellType">.uint8</inputport>
        <inputport name="nullValue">.default</inputport>
        <inputport name="resultIsSparse">.no</inputport>
        <inputport name="resultFormat">.none</inputport>
        <outputport name="result" id="v6" />
        <functor name="NumberMap">
            <property key="dff.functor.alias" value="numberMap2704" />
            <inputport name="map" peerid="v3" />
            <inputport name="mapNumber">1</inputport>
        </functor>
        <functor name="NumberTable">
            <property key="dff.functor.alias" value="numberTable2716" />
            <inputport name="table" peerid="v1" />
            <inputport name="tableNumber">1</inputport>
        </functor>
        <functor name="NumberValue">
            <property key="dff.functor.alias" value="numberValue36570" />
            <inputport name="value" peerid="v10" />
            <inputport name="valueNumber">1</inputport>
        </functor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.functor.alias" value="group2717" />
        <inputport name="sequenceInput">.none</inputport>
        <functor name="ExtractStructString">
            <property key="dff.functor.alias" value="extractStructString2706" />
            <inputport name="struct" peerid="v11" />
            <inputport name="name">$&quot;(exp)&quot;</inputport>
            <outputport name="string" id="v7" />
        </functor>
        <functor name="ExtractStructString">
            <property key="dff.functor.alias" value="extractStructString2706" />
            <inputport name="struct" peerid="v11" />
            <inputport name="name">$&quot;(csv)&quot;</inputport>
            <outputport name="string" id="v8" />
        </functor>
        <functor name="SaveTextFile">
            <property key="dff.functor.alias" value="saveTemporaryFilterTable" />
            <inputport name="text" peerid="v8" />
            <inputport name="filename" peerid="v9" />
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="workdir">.none</inputport>
        </functor>
        <functor name="GenerateTemporaryFile">
            <property key="dff.functor.alias" value="generateTemporaryFile2708" />
            <inputport name="extension">$&quot;(csv)&quot;</inputport>
            <inputport name="createFile">.no</inputport>
            <outputport name="filename" id="v9" />
        </functor>
        <functor name="ExtractStructNumber">
            <property key="dff.functor.alias" value="maxValue" />
            <property key="dff.functor.comment" value="Last else" />
            <inputport name="struct" peerid="v11" />
            <inputport name="name">$&quot;(max)&quot;</inputport>
            <outputport name="number" id="v10" />
        </functor>
        <containerfunctor name="CalculatePythonExpression">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="calculatePythonExpression2698" />
            <inputport name="expression">&quot;aW1wb3J0IGpzb24KY3N2TGVnZW5kID0gZGluYW1pY2EuaW5wdXRzWyJ0MSJdCgpnZW5Dc3YgPSBbJ0NhdGVnb3J5KiwgVG8sJ10KaGVhZCA9IGNzdkxlZ2VuZFswXQpyZXN1bHQgPSBbXQppRWxtID0gMApmb3IgZWxtIGluIGNzdkxlZ2VuZFsxOl06CgljdXJMaW5lID0gJycKCWlmIGxlbihyZXN1bHQpID09IDA6CgkJY3VyTGluZSA9ICdpZiBpMSA8PSAnICsgc3RyKGVsbVtoZWFkLmluZGV4KCdUbycpXSkgKyAnIHRoZW4gJyArIHN0cihpRWxtKQoJZWxpZiBpRWxtICsgMiA9PSBsZW4oY3N2TGVnZW5kKTogIyArMiDDqSBwcSB0aXJhIG8gaGVhZCBkbyBjc3YKCQljdXJMaW5lID0gJ2Vsc2UgJyArIHN0cihpRWxtKQoJZWxzZToKCQljdXJMaW5lID0gJyBlbHNlIGlmIGkxIDw9ICcgKyBzdHIoZWxtW2hlYWQuaW5kZXgoJ1RvJyldKSArICcgdGhlbiAnICsgc3RyKGlFbG0pCglyZXN1bHQuYXBwZW5kKGN1ckxpbmUpCglnZW5Dc3YuYXBwZW5kKHN0cihlbG1baGVhZC5pbmRleCgnVG8nKV0pICsgIiwgIiArIHN0cihpRWxtKSkKCWlFbG0gPSBpRWxtICsgMQpwcmludChqc29uLmR1bXBzKGNzdkxlZ2VuZCkpCnByaW50KCItLS0tLS0tLS0tLS0tLSIpCnByaW50KCdcbicuam9pbihyZXN1bHQpKQppRWxtID0gaUVsbSAtIDEKZGluYW1pY2Eub3V0cHV0c1snbWF4J10gPSBpRWxtCmRpbmFtaWNhLm91dHB1dHNbJ2V4cCddID0gJ1xuJy5qb2luKHJlc3VsdCkKZGluYW1pY2Eub3V0cHV0c1snY3N2J10gPSAnXG4nLmpvaW4oZ2VuQ3N2KQ==&quot;</inputport>
            <outputport name="result" id="v11" />
            <functor name="NumberTable">
                <property key="dff.functor.alias" value="numberTable2699" />
                <inputport name="table" peerid="v5" />
                <inputport name="tableNumber">1</inputport>
            </functor>
            <functor name="NumberString">
                <property key="dff.functor.alias" value="numberString2709" />
                <inputport name="value" peerid="v9" />
                <inputport name="valueNumber">1</inputport>
            </functor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.functor.alias" value="group2723" />
        <inputport name="sequenceInput">.none</inputport>
        <functor name="SaveMap">
            <property key="dff.functor.alias" value="saveMap2720" />
            <inputport name="map" peerid="v6" />
            <inputport name="filename" peerid="v12" />
            <inputport name="suffixDigits">2</inputport>
            <inputport name="step">.none</inputport>
            <inputport name="useCompression">.yes</inputport>
            <inputport name="workdir">.none</inputport>
            <inputport name="ignoreCostlySparseCategories">.yes</inputport>
        </functor>
        <functor name="GenerateTemporaryFile">
            <property key="dff.functor.alias" value="mapToPublish" />
            <inputport name="extension">$&quot;(tif)&quot;</inputport>
            <inputport name="createFile">.no</inputport>
            <outputport name="filename" id="v12" />
        </functor>
    </containerfunctor>
    <containerfunctor name="CalculatePythonExpression">
        <property key="dff.container.collapsed" value="no" />
        <property key="dff.functor.alias" value="calculatePythonExpression2724" />
        <inputport name="expression">&quot;&quot;</inputport>
        <outputport name="result" id="v13" />
        <functor name="NumberString">
            <property key="dff.functor.alias" value="numberString2728" />
            <inputport name="value" peerid="v15" />
            <inputport name="valueNumber">1</inputport>
        </functor>
        <functor name="NumberString">
            <property key="dff.functor.alias" value="numberString2729" />
            <inputport name="value" peerid="v14" />
            <inputport name="valueNumber">2</inputport>
        </functor>
        <functor name="NumberValue">
            <property key="dff.functor.alias" value="numberValue2731" />
            <inputport name="value" peerid="v2" />
            <inputport name="valueNumber">1</inputport>
        </functor>
        <functor name="NumberString">
            <property key="dff.functor.alias" value="numberString2733" />
            <inputport name="value" peerid="v19" />
            <inputport name="valueNumber">3</inputport>
        </functor>
        <functor name="NumberTable">
            <property key="dff.functor.alias" value="numberTable2737" />
            <inputport name="table" peerid="v16" />
            <inputport name="tableNumber">1</inputport>
        </functor>
        <functor name="NumberString">
            <property key="dff.functor.alias" value="numberString2743" />
            <inputport name="value" peerid="v4" />
            <inputport name="valueNumber">4</inputport>
        </functor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.functor.alias" value="group2736" />
        <inputport name="sequenceInput">.none</inputport>
        <functor name="String">
            <property key="dff.functor.alias" value="gitRepository" />
            <property key="dff.functor.comment" value="Value or constant representing string." />
            <property key="submodel.in.constant.advanced" value="yes" />
            <property key="submodel.in.constant.description" value="Value or constant representing string." />
            <property key="submodel.in.constant.name" value="gitRepositoryName" />
            <property key="submodel.in.constant.optional" value="yes" />
            <property key="submodel.in.constant.order" value="5" />
            <inputport name="constant">$&quot;(Mappia_Dinamica)&quot;</inputport>
            <outputport name="object" id="v14" />
        </functor>
        <functor name="String">
            <property key="dff.functor.alias" value="input_file" />
            <inputport name="constant" peerid="v12" />
            <outputport name="object" id="v15" />
        </functor>
        <functor name="Table">
            <property key="dff.functor.alias" value="sldCsv" />
            <inputport name="constant" peerid="v5" />
            <outputport name="object" id="v16" />
        </functor>
    </containerfunctor>
    <containerfunctor name="Group">
        <property key="dff.functor.alias" value="verifyInputs" />
        <inputport name="sequenceInput">.none</inputport>
        <functor name="Table">
            <property key="dff.functor.alias" value="Raster Palette Csv" />
            <property key="dff.functor.comment" value='A CSV with the columns:&#x0A;&quot;Category*, From, To, Category_Name, red, green, blue, &quot;' />
            <property key="dff.functor.extendedcomment" value="EX:&#x0A;Category*, From, To, Category_Name, red, green, blue,&#x0A;0, -99, -99, Non-forest, 178, 178, 178,&#x0A;1, 0, 1.0, Forest, 0, 0, 255,&#x0A;2, 1.01, 2.00, River, 51, 194, 255," />
            <property key="submodel.in.constant.advanced" value="yes" />
            <property key="submodel.in.constant.description" value='A CSV with the columns:&#x0A;&quot;Category*, From, To, Category_Name, red, green, blue, &quot;' />
            <property key="submodel.in.constant.name" value="rasterPaletteCsv" />
            <property key="submodel.in.constant.optional" value="yes" />
            <property key="submodel.in.constant.order" value="3" />
            <inputport name="constant">[&#x0A;    &quot;Category*&quot;, &quot;From&quot;, &quot;To&quot;, &quot;Category_Name#str&quot;, &quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &#x0A;]</inputport>
            <outputport name="object" id="v17" />
        </functor>
        <functor name="ExtractStructNumber">
            <property key="dff.functor.alias" value="isCsvValid" />
            <inputport name="struct" peerid="v22" />
            <inputport name="name">$&quot;(result)&quot;</inputport>
            <outputport name="number" id="v18" />
        </functor>
        <functor name="String">
            <property key="dff.functor.alias" value="outputDir" />
            <property key="dff.functor.comment" value="A Directory EMPTY or With a repository already.&#x0A;The directory to save the publishing tiles.&#x0A;* Only use the same directory when using the same &apos;GitRepository&apos;.&#x0A;* On new repository please use a empty folder." />
            <property key="submodel.in.constant.advanced" value="no" />
            <property key="submodel.in.constant.description" value="A Directory EMPTY or With a repository already.&#x0A;The directory to save the publishing tiles.&#x0A;* Only use the same directory when using the same &apos;GitRepository&apos;.&#x0A;* On new repository please use a empty folder." />
            <property key="submodel.in.constant.name" value="outputDir" />
            <property key="submodel.in.constant.optional" value="no" />
            <property key="submodel.in.constant.order" value="2" />
            <outputport name="object" id="v19" />
        </functor>
        <functor name="ExtractStructNumber">
            <property key="dff.functor.alias" value="extractStructNumber3616" />
            <inputport name="struct" peerid="v23" />
            <inputport name="name">$&quot;(isdir)&quot;</inputport>
            <outputport name="number" id="v20" />
        </functor>
        <functor name="ExtractStructNumber">
            <property key="dff.functor.alias" value="isEmpty" />
            <inputport name="struct" peerid="v22" />
            <inputport name="name">$&quot;(isempty)&quot;</inputport>
            <outputport name="number" id="v21" />
        </functor>
        <containerfunctor name="CalculatePythonExpression">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="calculatePythonExpression3614" />
            <inputport name="expression">&quot;aW1wb3J0IGpzb24KY3N2TGVnZW5kID0gZGluYW1pY2EuaW5wdXRzWyJ0MSJdCgpoZWFkID0gY3N2TGVnZW5kWzBdCnByaW50KGhlYWQpCnJlc3VsdCA9IE5vbmUKIydDYXRlZ29yeScsICdGcm9tJywgJ1RvJywgJ0NhdGVnb3J5X05hbWUnLCAncmVkJywgJ2dyZWVuJywgJ2JsdWUnCmlmICJDYXRlZ29yeSIgbm90IGluIGhlYWQgb3IgIkZyb20iIG5vdCBpbiBoZWFkIG9yICJUbyIgbm90IGluIGhlYWQgb3IgIkNhdGVnb3J5X05hbWUiIG5vdCBpbiBoZWFkIG9yICJyZWQiIG5vdCBpbiBoZWFkIG9yICJncmVlbiIgbm90IGluIGhlYWQgb3IgImJsdWUiIG5vdCBpbiBoZWFkOgoJcHJpbnQoIkVycm9yLCBpbiBSYXN0ZXIgUGFsZXR0ZSBDU1YuIFRoZSB0YWJsZSBtdXN0IGhhdmUgZXhhY3RseSB0aGUgZm9ybWF0IG9mLCBjb2x1bW5zOlxuXG4nQ2F0ZWdvcnkqLCBGcm9tLCBUbywgQ2F0ZWdvcnlfTmFtZSwgcmVkLCBncmVlbiwgYmx1ZSciKQoJcHJpbnQoIllvdSBjYW4gbGVhdmUgaXQgZW1wdHkgdG8gY3JlYXRlIGl0IGF1dG9tYXRpY2FsbHkiKQoJcmVzdWx0ID0gMAplbHNlOgoJcmVzdWx0ID0gMQoJCmRpbmFtaWNhLm91dHB1dHNbJ3Jlc3VsdCddID0gcmVzdWx0CmRpbmFtaWNhLm91dHB1dHNbJ2lzZW1wdHknXSA9IDAgaWYgbGVuKGNzdkxlZ2VuZCkgPiAxIGVsc2UgMQ==&quot;</inputport>
            <outputport name="result" id="v22" />
            <functor name="NumberTable">
                <property key="dff.functor.alias" value="numberTable3615" />
                <inputport name="table" peerid="v17" />
                <inputport name="tableNumber">1</inputport>
            </functor>
        </containerfunctor>
        <containerfunctor name="CalculatePythonExpression">
            <property key="dff.container.collapsed" value="no" />
            <property key="dff.functor.alias" value="calculatePythonExpression4047" />
            <inputport name="expression">&quot;aW1wb3J0IG9zCnRyeToKCW9zLm1ha2VkaXJzKGRpbmFtaWNhLmlucHV0c1siczEiXSwgZXhpc3Rfb2s9VHJ1ZSkKZXhjZXB0OgoJcGFzcwpkaW5hbWljYS5vdXRwdXRzWydpc2RpciddID0gMSBpZiBvcy5wYXRoLmlzZGlyKGRpbmFtaWNhLmlucHV0c1siczEiXSkgZWxzZSAw&quot;</inputport>
            <outputport name="result" id="v23" />
            <functor name="NumberString">
                <property key="dff.functor.alias" value="numberString4049" />
                <inputport name="value" peerid="v19" />
                <inputport name="valueNumber">1</inputport>
            </functor>
        </containerfunctor>
        <containerfunctor name="IfNotThen">
            <property key="dff.functor.alias" value="ifNotThen3619" />
            <inputport name="condition" peerid="v20" />
            <functor name="Exit">
                <property key="dff.functor.alias" value="exit3618" />
                <inputport name="message">$&quot;(Please select a output directory that exists.)&quot;</inputport>
            </functor>
        </containerfunctor>
        <containerfunctor name="IfNotThen">
            <property key="dff.functor.alias" value="ifNotThen43513" />
            <inputport name="condition" peerid="v21" />
            <functor name="Table">
                <property key="dff.functor.alias" value="table41963" />
                <inputport name="constant" peerid="v17" />
                <outputport name="object" id="v24" />
            </functor>
            <containerfunctor name="IfNotThen">
                <property key="dff.functor.alias" value="ifNotThen3619" />
                <inputport name="condition" peerid="v18" />
                <functor name="Exit">
                    <property key="dff.functor.alias" value="exit3618" />
                    <inputport name="message">$&quot;(Error, in Raster Palette CSV. The table must have exactly the format of, columns:\n\n&apos;Category*, From, To, Category_Name, red, green, blue&apos;)&quot;</inputport>
                </functor>
            </containerfunctor>
        </containerfunctor>
    </containerfunctor>
    <containerfunctor name="IfThen">
        <property key="dff.functor.alias" value="ifThen143662" />
        <inputport name="condition" peerid="v21" />
        <functor name="CreateLegendFromQntEntry">
            <property key="dff.functor.alias" value="createLegendFromQntEntry138052" />
            <property key="submodel.in.maximumnumberofcategories.advanced" value="no" />
            <property key="submodel.in.maximumnumberofcategories.description" value="Maximum number of categories in the resulting categorization." />
            <property key="submodel.in.maximumnumberofcategories.name" value="maximumNumberOfCategories" />
            <property key="submodel.in.maximumnumberofcategories.optional" value="yes" />
            <property key="submodel.in.maximumnumberofcategories.order" value="7" />
            <inputport name="inputMap" peerid="v3" />
            <inputport name="MaximumNumberOfCategories">8</inputport>
            <outputport name="categoriesAsCsv" id="v25" />
        </functor>
    </containerfunctor>
</script>
